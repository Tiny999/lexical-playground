import {
  TRANSFORMERS,
  registerMarkdownShortcuts
} from "./chunk-AMZ5KTP4.js";
import "./chunk-RXMX3NAJ.js";
import {
  $createHorizontalRuleNode,
  $isHorizontalRuleNode,
  HorizontalRuleNode
} from "./chunk-VDTGY7XV.js";
import "./chunk-UJYKK5ES.js";
import "./chunk-7KR3ZO5X.js";
import "./chunk-UV775WKF.js";
import "./chunk-YM4E6YXI.js";
import {
  useLexicalComposerContext
} from "./chunk-5BMJGEYX.js";
import "./chunk-O6OHZHAK.js";
import "./chunk-WLVB5OIP.js";
import {
  require_react
} from "./chunk-CANBAPAS.js";
import "./chunk-MSD7RC6N.js";
import "./chunk-VPCBVKHR.js";
import "./chunk-VD5PEWHI.js";
import "./chunk-CVCL6TEU.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.mjs
var import_react = __toESM(require_react(), 1);
var HR = {
  dependencies: [HorizontalRuleNode],
  export: (node) => {
    return $isHorizontalRuleNode(node) ? "***" : null;
  },
  regExp: /^(---|\*\*\*|___)\s?$/,
  replace: (parentNode, _1, _2, isImport) => {
    const line = $createHorizontalRuleNode();
    if (isImport || parentNode.getNextSibling() != null) {
      parentNode.replace(line);
    } else {
      parentNode.insertBefore(line);
    }
    line.selectNext();
  },
  type: "element"
};
var DEFAULT_TRANSFORMERS = [HR, ...TRANSFORMERS];
function MarkdownShortcutPlugin({
  transformers = DEFAULT_TRANSFORMERS
}) {
  const [editor] = useLexicalComposerContext();
  (0, import_react.useEffect)(() => {
    return registerMarkdownShortcuts(editor, transformers);
  }, [editor, transformers]);
  return null;
}
export {
  DEFAULT_TRANSFORMERS,
  MarkdownShortcutPlugin
};
//# sourceMappingURL=@lexical_react_LexicalMarkdownShortcutPlugin.js.map
