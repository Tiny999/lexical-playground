import {
  $applyNodeReplacement,
  ElementNode
} from "./chunk-CVCL6TEU.js";

// node_modules/@lexical/overflow/LexicalOverflow.dev.mjs
var OverflowNode = class _OverflowNode extends ElementNode {
  static getType() {
    return "overflow";
  }
  static clone(node) {
    return new _OverflowNode(node.__key);
  }
  static importJSON(serializedNode) {
    return $createOverflowNode();
  }
  static importDOM() {
    return null;
  }
  constructor(key) {
    super(key);
    this.__type = "overflow";
  }
  exportJSON() {
    return {
      ...super.exportJSON(),
      type: "overflow"
    };
  }
  createDOM(config) {
    const div = document.createElement("span");
    const className = config.theme.characterLimit;
    if (typeof className === "string") {
      div.className = className;
    }
    return div;
  }
  updateDOM(prevNode, dom) {
    return false;
  }
  insertNewAfter(selection, restoreSelection = true) {
    const parent = this.getParentOrThrow();
    return parent.insertNewAfter(selection, restoreSelection);
  }
  excludeFromCopy() {
    return true;
  }
  static transform() {
    return (node) => {
      if (!$isOverflowNode(node)) {
        throw Error(`node is not a OverflowNode`);
      }
      if (node.isEmpty()) {
        node.remove();
      }
    };
  }
};
function $createOverflowNode() {
  return $applyNodeReplacement(new OverflowNode());
}
function $isOverflowNode(node) {
  return node instanceof OverflowNode;
}

export {
  OverflowNode,
  $createOverflowNode,
  $isOverflowNode
};
//# sourceMappingURL=chunk-4N2DLK5P.js.map
