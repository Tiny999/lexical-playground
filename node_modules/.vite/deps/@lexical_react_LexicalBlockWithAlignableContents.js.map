{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalBlockWithAlignableContents.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $isDecoratorBlockNode } from '@lexical/react/LexicalDecoratorBlockNode';\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection';\nimport { mergeRegister, $getNearestBlockElementAncestorOrThrow } from '@lexical/utils';\nimport { $getSelection, $isNodeSelection, $isDecoratorNode, FORMAT_ELEMENT_COMMAND, $getNodeByKey, $isRangeSelection, COMMAND_PRIORITY_LOW, CLICK_COMMAND, KEY_DELETE_COMMAND, KEY_BACKSPACE_COMMAND } from 'lexical';\nimport { useRef, useCallback, useEffect } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction BlockWithAlignableContents({\n  children,\n  format,\n  nodeKey,\n  className\n}) {\n  const [editor] = useLexicalComposerContext();\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey);\n  const ref = useRef(null);\n  const $onDelete = useCallback(event => {\n    const deleteSelection = $getSelection();\n    if (isSelected && $isNodeSelection(deleteSelection)) {\n      event.preventDefault();\n      editor.update(() => {\n        deleteSelection.getNodes().forEach(node => {\n          if ($isDecoratorNode(node)) {\n            node.remove();\n          }\n        });\n      });\n    }\n    return false;\n  }, [editor, isSelected]);\n  useEffect(() => {\n    return mergeRegister(editor.registerCommand(FORMAT_ELEMENT_COMMAND, formatType => {\n      if (isSelected) {\n        const selection = $getSelection();\n        if ($isNodeSelection(selection)) {\n          const node = $getNodeByKey(nodeKey);\n          if ($isDecoratorBlockNode(node)) {\n            node.setFormat(formatType);\n          }\n        } else if ($isRangeSelection(selection)) {\n          const nodes = selection.getNodes();\n          for (const node of nodes) {\n            if ($isDecoratorBlockNode(node)) {\n              node.setFormat(formatType);\n            } else {\n              const element = $getNearestBlockElementAncestorOrThrow(node);\n              element.setFormat(formatType);\n            }\n          }\n        }\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(CLICK_COMMAND, event => {\n      if (event.target === ref.current) {\n        event.preventDefault();\n        if (!event.shiftKey) {\n          clearSelection();\n        }\n        setSelected(!isSelected);\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_DELETE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_BACKSPACE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW));\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected]);\n  return /*#__PURE__*/jsx(\"div\", {\n    className: [className.base, isSelected ? className.focus : null].filter(Boolean).join(' '),\n    ref: ref,\n    style: {\n      textAlign: format ? format : undefined\n    },\n    children: children\n  });\n}\n\nexport { BlockWithAlignableContents };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,mBAA+C;AAC/C,yBAAoB;AAUpB,SAAS,2BAA2B;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,QAAM,CAAC,MAAM,IAAI,0BAA0B;AAC3C,QAAM,CAAC,YAAY,aAAa,cAAc,IAAI,wBAAwB,OAAO;AACjF,QAAM,UAAM,qBAAO,IAAI;AACvB,QAAM,gBAAY,0BAAY,WAAS;AACrC,UAAM,kBAAkB,cAAc;AACtC,QAAI,cAAc,iBAAiB,eAAe,GAAG;AACnD,YAAM,eAAe;AACrB,aAAO,OAAO,MAAM;AAClB,wBAAgB,SAAS,EAAE,QAAQ,UAAQ;AACzC,cAAI,iBAAiB,IAAI,GAAG;AAC1B,iBAAK,OAAO;AAAA,UACd;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT,GAAG,CAAC,QAAQ,UAAU,CAAC;AACvB,8BAAU,MAAM;AACd,WAAO,cAAc,OAAO,gBAAgB,wBAAwB,gBAAc;AAChF,UAAI,YAAY;AACd,cAAM,YAAY,cAAc;AAChC,YAAI,iBAAiB,SAAS,GAAG;AAC/B,gBAAM,OAAO,cAAc,OAAO;AAClC,cAAI,sBAAsB,IAAI,GAAG;AAC/B,iBAAK,UAAU,UAAU;AAAA,UAC3B;AAAA,QACF,WAAW,kBAAkB,SAAS,GAAG;AACvC,gBAAM,QAAQ,UAAU,SAAS;AACjC,qBAAW,QAAQ,OAAO;AACxB,gBAAI,sBAAsB,IAAI,GAAG;AAC/B,mBAAK,UAAU,UAAU;AAAA,YAC3B,OAAO;AACL,oBAAM,UAAU,uCAAuC,IAAI;AAC3D,sBAAQ,UAAU,UAAU;AAAA,YAC9B;AAAA,UACF;AAAA,QACF;AACA,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,GAAG,oBAAoB,GAAG,OAAO,gBAAgB,eAAe,WAAS;AACvE,UAAI,MAAM,WAAW,IAAI,SAAS;AAChC,cAAM,eAAe;AACrB,YAAI,CAAC,MAAM,UAAU;AACnB,yBAAe;AAAA,QACjB;AACA,oBAAY,CAAC,UAAU;AACvB,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,GAAG,oBAAoB,GAAG,OAAO,gBAAgB,oBAAoB,WAAW,oBAAoB,GAAG,OAAO,gBAAgB,uBAAuB,WAAW,oBAAoB,CAAC;AAAA,EACvL,GAAG,CAAC,gBAAgB,QAAQ,YAAY,SAAS,WAAW,WAAW,CAAC;AACxE,aAAoB,wBAAI,OAAO;AAAA,IAC7B,WAAW,CAAC,UAAU,MAAM,aAAa,UAAU,QAAQ,IAAI,EAAE,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA,IACzF;AAAA,IACA,OAAO;AAAA,MACL,WAAW,SAAS,SAAS;AAAA,IAC/B;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": []
}
