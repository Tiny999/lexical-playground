import {
  $isListItemNode,
  $isListNode,
  INSERT_CHECK_LIST_COMMAND,
  insertList
} from "./chunk-YM4E6YXI.js";
import {
  useLexicalComposerContext
} from "./chunk-5BMJGEYX.js";
import {
  require_react
} from "./chunk-CANBAPAS.js";
import {
  $findMatchingParent,
  calculateZoomLevel,
  mergeRegister
} from "./chunk-VPCBVKHR.js";
import "./chunk-VD5PEWHI.js";
import {
  $getNearestNodeFromDOMNode,
  $getSelection,
  $isElementNode,
  $isRangeSelection,
  COMMAND_PRIORITY_LOW,
  KEY_ARROW_DOWN_COMMAND,
  KEY_ARROW_LEFT_COMMAND,
  KEY_ARROW_UP_COMMAND,
  KEY_ESCAPE_COMMAND,
  KEY_SPACE_COMMAND,
  getNearestEditorFromDOMNode,
  isHTMLElement
} from "./chunk-CVCL6TEU.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@lexical/react/LexicalCheckListPlugin.dev.mjs
var import_react = __toESM(require_react(), 1);
function CheckListPlugin() {
  const [editor] = useLexicalComposerContext();
  (0, import_react.useEffect)(() => {
    return mergeRegister(editor.registerCommand(INSERT_CHECK_LIST_COMMAND, () => {
      insertList(editor, "check");
      return true;
    }, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_ARROW_DOWN_COMMAND, (event) => {
      return handleArrownUpOrDown(event, editor, false);
    }, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_ARROW_UP_COMMAND, (event) => {
      return handleArrownUpOrDown(event, editor, true);
    }, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_ESCAPE_COMMAND, (event) => {
      const activeItem = getActiveCheckListItem();
      if (activeItem != null) {
        const rootElement = editor.getRootElement();
        if (rootElement != null) {
          rootElement.focus();
        }
        return true;
      }
      return false;
    }, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_SPACE_COMMAND, (event) => {
      const activeItem = getActiveCheckListItem();
      if (activeItem != null && editor.isEditable()) {
        editor.update(() => {
          const listItemNode = $getNearestNodeFromDOMNode(activeItem);
          if ($isListItemNode(listItemNode)) {
            event.preventDefault();
            listItemNode.toggleChecked();
          }
        });
        return true;
      }
      return false;
    }, COMMAND_PRIORITY_LOW), editor.registerCommand(KEY_ARROW_LEFT_COMMAND, (event) => {
      return editor.getEditorState().read(() => {
        const selection = $getSelection();
        if ($isRangeSelection(selection) && selection.isCollapsed()) {
          const {
            anchor
          } = selection;
          const isElement = anchor.type === "element";
          if (isElement || anchor.offset === 0) {
            const anchorNode = anchor.getNode();
            const elementNode = $findMatchingParent(anchorNode, (node) => $isElementNode(node) && !node.isInline());
            if ($isListItemNode(elementNode)) {
              const parent = elementNode.getParent();
              if ($isListNode(parent) && parent.getListType() === "check" && (isElement || elementNode.getFirstDescendant() === anchorNode)) {
                const domNode = editor.getElementByKey(elementNode.__key);
                if (domNode != null && document.activeElement !== domNode) {
                  domNode.focus();
                  event.preventDefault();
                  return true;
                }
              }
            }
          }
        }
        return false;
      });
    }, COMMAND_PRIORITY_LOW), editor.registerRootListener((rootElement, prevElement) => {
      if (rootElement !== null) {
        rootElement.addEventListener("click", handleClick);
        rootElement.addEventListener("pointerdown", handlePointerDown);
      }
      if (prevElement !== null) {
        prevElement.removeEventListener("click", handleClick);
        prevElement.removeEventListener("pointerdown", handlePointerDown);
      }
    }));
  });
  return null;
}
function handleCheckItemEvent(event, callback) {
  const target = event.target;
  if (target === null || !isHTMLElement(target)) {
    return;
  }
  const firstChild = target.firstChild;
  if (firstChild != null && isHTMLElement(firstChild) && (firstChild.tagName === "UL" || firstChild.tagName === "OL")) {
    return;
  }
  const parentNode = target.parentNode;
  if (!parentNode || parentNode.__lexicalListType !== "check") {
    return;
  }
  const rect = target.getBoundingClientRect();
  const pageX = event.pageX / calculateZoomLevel(target);
  if (target.dir === "rtl" ? pageX < rect.right && pageX > rect.right - 20 : pageX > rect.left && pageX < rect.left + 20) {
    callback();
  }
}
function handleClick(event) {
  handleCheckItemEvent(event, () => {
    if (event.target instanceof HTMLElement) {
      const domNode = event.target;
      const editor = getNearestEditorFromDOMNode(domNode);
      if (editor != null && editor.isEditable()) {
        editor.update(() => {
          const node = $getNearestNodeFromDOMNode(domNode);
          if ($isListItemNode(node)) {
            domNode.focus();
            node.toggleChecked();
          }
        });
      }
    }
  });
}
function handlePointerDown(event) {
  handleCheckItemEvent(event, () => {
    event.preventDefault();
  });
}
function getActiveCheckListItem() {
  const activeElement = document.activeElement;
  return activeElement != null && activeElement.tagName === "LI" && activeElement.parentNode != null && // @ts-ignore internal field
  activeElement.parentNode.__lexicalListType === "check" ? activeElement : null;
}
function findCheckListItemSibling(node, backward) {
  let sibling = backward ? node.getPreviousSibling() : node.getNextSibling();
  let parent = node;
  while (sibling == null && $isListItemNode(parent)) {
    parent = parent.getParentOrThrow().getParent();
    if (parent != null) {
      sibling = backward ? parent.getPreviousSibling() : parent.getNextSibling();
    }
  }
  while ($isListItemNode(sibling)) {
    const firstChild = backward ? sibling.getLastChild() : sibling.getFirstChild();
    if (!$isListNode(firstChild)) {
      return sibling;
    }
    sibling = backward ? firstChild.getLastChild() : firstChild.getFirstChild();
  }
  return null;
}
function handleArrownUpOrDown(event, editor, backward) {
  const activeItem = getActiveCheckListItem();
  if (activeItem != null) {
    editor.update(() => {
      const listItem = $getNearestNodeFromDOMNode(activeItem);
      if (!$isListItemNode(listItem)) {
        return;
      }
      const nextListItem = findCheckListItemSibling(listItem, backward);
      if (nextListItem != null) {
        nextListItem.selectStart();
        const dom = editor.getElementByKey(nextListItem.__key);
        if (dom != null) {
          event.preventDefault();
          setTimeout(() => {
            dom.focus();
          }, 0);
        }
      }
    });
  }
  return false;
}
export {
  CheckListPlugin
};
//# sourceMappingURL=@lexical_react_LexicalCheckListPlugin.js.map
