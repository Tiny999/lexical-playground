import {
  CLEAR_HISTORY_COMMAND
} from "./chunk-CVCL6TEU.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/@lexical/file/LexicalFile.dev.mjs
var version = "0.20.0";
function serializedDocumentFromEditorState(editorState, config = Object.freeze({})) {
  return {
    editorState: editorState.toJSON(),
    lastSaved: config.lastSaved || Date.now(),
    source: config.source || "Lexical",
    version
  };
}
function editorStateFromSerializedDocument(editor, maybeStringifiedDocument) {
  const json = typeof maybeStringifiedDocument === "string" ? JSON.parse(maybeStringifiedDocument) : maybeStringifiedDocument;
  return editor.parseEditorState(json.editorState);
}
function importFile(editor) {
  readTextFileFromSystem((text) => {
    editor.setEditorState(editorStateFromSerializedDocument(editor, text));
    editor.dispatchCommand(CLEAR_HISTORY_COMMAND, void 0);
  });
}
function readTextFileFromSystem(callback) {
  const input = document.createElement("input");
  input.type = "file";
  input.accept = ".lexical";
  input.addEventListener("change", (event) => {
    const target = event.target;
    if (target.files) {
      const file = target.files[0];
      const reader = new FileReader();
      reader.readAsText(file, "UTF-8");
      reader.onload = (readerEvent) => {
        if (readerEvent.target) {
          const content = readerEvent.target.result;
          callback(content);
        }
      };
    }
  });
  input.click();
}
function exportFile(editor, config = Object.freeze({})) {
  const now = /* @__PURE__ */ new Date();
  const serializedDocument = serializedDocumentFromEditorState(editor.getEditorState(), {
    ...config,
    lastSaved: now.getTime()
  });
  const fileName = config.fileName || now.toISOString();
  exportBlob(serializedDocument, `${fileName}.lexical`);
}
function exportBlob(data, fileName) {
  const a = document.createElement("a");
  const body = document.body;
  if (body === null) {
    return;
  }
  body.appendChild(a);
  a.style.display = "none";
  const json = JSON.stringify(data);
  const blob = new Blob([json], {
    type: "octet/stream"
  });
  const url = window.URL.createObjectURL(blob);
  a.href = url;
  a.download = fileName;
  a.click();
  window.URL.revokeObjectURL(url);
  a.remove();
}
export {
  editorStateFromSerializedDocument,
  exportFile,
  importFile,
  serializedDocumentFromEditorState
};
//# sourceMappingURL=@lexical_file.js.map
