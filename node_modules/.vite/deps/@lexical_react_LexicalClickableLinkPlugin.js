import {
  useLexicalComposerContext
} from "./chunk-5BMJGEYX.js";
import {
  require_react
} from "./chunk-CANBAPAS.js";
import {
  $isLinkNode
} from "./chunk-MSD7RC6N.js";
import {
  $findMatchingParent
} from "./chunk-VPCBVKHR.js";
import "./chunk-VD5PEWHI.js";
import {
  $getNearestNodeFromDOMNode,
  $getSelection,
  $isElementNode,
  $isRangeSelection,
  getNearestEditorFromDOMNode,
  isHTMLAnchorElement
} from "./chunk-CVCL6TEU.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@lexical/react/LexicalClickableLinkPlugin.dev.mjs
var import_react = __toESM(require_react(), 1);
function findMatchingDOM(startNode, predicate) {
  let node = startNode;
  while (node != null) {
    if (predicate(node)) {
      return node;
    }
    node = node.parentNode;
  }
  return null;
}
function ClickableLinkPlugin({
  newTab = true,
  disabled = false
}) {
  const [editor] = useLexicalComposerContext();
  (0, import_react.useEffect)(() => {
    const onClick = (event) => {
      const target = event.target;
      if (!(target instanceof Node)) {
        return;
      }
      const nearestEditor = getNearestEditorFromDOMNode(target);
      if (nearestEditor === null) {
        return;
      }
      let url = null;
      let urlTarget = null;
      nearestEditor.update(() => {
        const clickedNode = $getNearestNodeFromDOMNode(target);
        if (clickedNode !== null) {
          const maybeLinkNode = $findMatchingParent(clickedNode, $isElementNode);
          if (!disabled) {
            if ($isLinkNode(maybeLinkNode)) {
              url = maybeLinkNode.sanitizeUrl(maybeLinkNode.getURL());
              urlTarget = maybeLinkNode.getTarget();
            } else {
              const a = findMatchingDOM(target, isHTMLAnchorElement);
              if (a !== null) {
                url = a.href;
                urlTarget = a.target;
              }
            }
          }
        }
      });
      if (url === null || url === "") {
        return;
      }
      const selection = editor.getEditorState().read($getSelection);
      if ($isRangeSelection(selection) && !selection.isCollapsed()) {
        event.preventDefault();
        return;
      }
      const isMiddle = event.type === "auxclick" && event.button === 1;
      window.open(url, newTab || isMiddle || event.metaKey || event.ctrlKey || urlTarget === "_blank" ? "_blank" : "_self");
      event.preventDefault();
    };
    const onMouseUp = (event) => {
      if (event.button === 1) {
        onClick(event);
      }
    };
    return editor.registerRootListener((rootElement, prevRootElement) => {
      if (prevRootElement !== null) {
        prevRootElement.removeEventListener("click", onClick);
        prevRootElement.removeEventListener("mouseup", onMouseUp);
      }
      if (rootElement !== null) {
        rootElement.addEventListener("click", onClick);
        rootElement.addEventListener("mouseup", onMouseUp);
      }
    });
  }, [editor, newTab, disabled]);
  return null;
}
export {
  ClickableLinkPlugin,
  ClickableLinkPlugin as default
};
//# sourceMappingURL=@lexical_react_LexicalClickableLinkPlugin.js.map
