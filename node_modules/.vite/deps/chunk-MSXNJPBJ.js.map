{
  "version": 3,
  "sources": ["../../@lexical/react/useLexicalEditable.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useLayoutEffect, useEffect, useMemo, useRef, useState } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Shortcut to Lexical subscriptions when values are used for render.\n * @param subscription - The function to create the {@link LexicalSubscription}. This function's identity must be stable (e.g. defined at module scope or with useCallback).\n */\nfunction useLexicalSubscription(subscription) {\n  const [editor] = useLexicalComposerContext();\n  const initializedSubscription = useMemo(() => subscription(editor), [editor, subscription]);\n  const valueRef = useRef(initializedSubscription.initialValueFn());\n  const [value, setValue] = useState(valueRef.current);\n  useLayoutEffectImpl(() => {\n    const {\n      initialValueFn,\n      subscribe\n    } = initializedSubscription;\n    const currentValue = initialValueFn();\n    if (valueRef.current !== currentValue) {\n      valueRef.current = currentValue;\n      setValue(currentValue);\n    }\n    return subscribe(newValue => {\n      valueRef.current = newValue;\n      setValue(newValue);\n    });\n  }, [initializedSubscription, subscription]);\n  return value;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction subscription(editor) {\n  return {\n    initialValueFn: () => editor.isEditable(),\n    subscribe: callback => {\n      return editor.registerEditableListener(callback);\n    }\n  };\n}\n\n/**\n * Get the current value for {@link LexicalEditor.isEditable}\n * using {@link useLexicalSubscription}.\n * You should prefer this over manually observing the value with\n * {@link LexicalEditor.registerEditableListener},\n * which is a bit tricky to do correctly, particularly when using\n * React StrictMode (the default for development) or concurrency.\n */\nfunction useLexicalEditable() {\n  return useLexicalSubscription(subscription);\n}\n\nexport { useLexicalEditable as default, useLexicalEditable };\n"],
  "mappings": ";;;;;;;;;;;AASA,mBAAsE;AAUtE,IAAM,cAAc,OAAO,WAAW,eAAe,OAAO,OAAO,aAAa,eAAe,OAAO,OAAO,SAAS,kBAAkB;AAcxI,IAAM,sBAAsB,cAAc,+BAAkB;AAc5D,SAAS,uBAAuBA,eAAc;AAC5C,QAAM,CAAC,MAAM,IAAI,0BAA0B;AAC3C,QAAM,8BAA0B,sBAAQ,MAAMA,cAAa,MAAM,GAAG,CAAC,QAAQA,aAAY,CAAC;AAC1F,QAAM,eAAW,qBAAO,wBAAwB,eAAe,CAAC;AAChE,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAS,SAAS,OAAO;AACnD,sBAAoB,MAAM;AACxB,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAI;AACJ,UAAM,eAAe,eAAe;AACpC,QAAI,SAAS,YAAY,cAAc;AACrC,eAAS,UAAU;AACnB,eAAS,YAAY;AAAA,IACvB;AACA,WAAO,UAAU,cAAY;AAC3B,eAAS,UAAU;AACnB,eAAS,QAAQ;AAAA,IACnB,CAAC;AAAA,EACH,GAAG,CAAC,yBAAyBA,aAAY,CAAC;AAC1C,SAAO;AACT;AAUA,SAAS,aAAa,QAAQ;AAC5B,SAAO;AAAA,IACL,gBAAgB,MAAM,OAAO,WAAW;AAAA,IACxC,WAAW,cAAY;AACrB,aAAO,OAAO,yBAAyB,QAAQ;AAAA,IACjD;AAAA,EACF;AACF;AAUA,SAAS,qBAAqB;AAC5B,SAAO,uBAAuB,YAAY;AAC5C;",
  "names": ["subscription"]
}
