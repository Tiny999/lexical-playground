{
  "version": 3,
  "sources": ["../../@lexical/react/LexicalTabIndentationPlugin.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $filter, $getNearestBlockElementAncestorOrThrow } from '@lexical/utils';\nimport { KEY_TAB_COMMAND, $getSelection, $isRangeSelection, OUTDENT_CONTENT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_TAB_COMMAND, COMMAND_PRIORITY_EDITOR, $isBlockElementNode, $createRangeSelection, $normalizeSelection__EXPERIMENTAL } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $indentOverTab(selection) {\n  // const handled = new Set();\n  const nodes = selection.getNodes();\n  const canIndentBlockNodes = $filter(nodes, node => {\n    if ($isBlockElementNode(node) && node.canIndent()) {\n      return node;\n    }\n    return null;\n  });\n  // 1. If selection spans across canIndent block nodes: indent\n  if (canIndentBlockNodes.length > 0) {\n    return true;\n  }\n  // 2. If first (anchor/focus) is at block start: indent\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const first = focus.isBefore(anchor) ? focus : anchor;\n  const firstNode = first.getNode();\n  const firstBlock = $getNearestBlockElementAncestorOrThrow(firstNode);\n  if (firstBlock.canIndent()) {\n    const firstBlockKey = firstBlock.getKey();\n    let selectionAtStart = $createRangeSelection();\n    selectionAtStart.anchor.set(firstBlockKey, 0, 'element');\n    selectionAtStart.focus.set(firstBlockKey, 0, 'element');\n    selectionAtStart = $normalizeSelection__EXPERIMENTAL(selectionAtStart);\n    if (selectionAtStart.anchor.is(first)) {\n      return true;\n    }\n  }\n  // 3. Else: tab\n  return false;\n}\nfunction registerTabIndentation(editor) {\n  return editor.registerCommand(KEY_TAB_COMMAND, event => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    const command = $indentOverTab(selection) ? event.shiftKey ? OUTDENT_CONTENT_COMMAND : INDENT_CONTENT_COMMAND : INSERT_TAB_COMMAND;\n    return editor.dispatchCommand(command, undefined);\n  }, COMMAND_PRIORITY_EDITOR);\n}\n\n/**\n * This plugin adds the ability to indent content using the tab key. Generally, we don't\n * recommend using this plugin as it could negatively affect acessibility for keyboard\n * users, causing focus to become trapped within the editor.\n */\nfunction TabIndentationPlugin() {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    return registerTabIndentation(editor);\n  });\n  return null;\n}\n\nexport { TabIndentationPlugin, registerTabIndentation };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,mBAA0B;AAU1B,SAAS,eAAe,WAAW;AAEjC,QAAM,QAAQ,UAAU,SAAS;AACjC,QAAM,sBAAsB,QAAQ,OAAO,UAAQ;AACjD,QAAI,oBAAoB,IAAI,KAAK,KAAK,UAAU,GAAG;AACjD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,CAAC;AAED,MAAI,oBAAoB,SAAS,GAAG;AAClC,WAAO;AAAA,EACT;AAEA,QAAM,SAAS,UAAU;AACzB,QAAM,QAAQ,UAAU;AACxB,QAAM,QAAQ,MAAM,SAAS,MAAM,IAAI,QAAQ;AAC/C,QAAM,YAAY,MAAM,QAAQ;AAChC,QAAM,aAAa,uCAAuC,SAAS;AACnE,MAAI,WAAW,UAAU,GAAG;AAC1B,UAAM,gBAAgB,WAAW,OAAO;AACxC,QAAI,mBAAmB,sBAAsB;AAC7C,qBAAiB,OAAO,IAAI,eAAe,GAAG,SAAS;AACvD,qBAAiB,MAAM,IAAI,eAAe,GAAG,SAAS;AACtD,uBAAmB,oBAAkC,gBAAgB;AACrE,QAAI,iBAAiB,OAAO,GAAG,KAAK,GAAG;AACrC,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AACA,SAAS,uBAAuB,QAAQ;AACtC,SAAO,OAAO,gBAAgB,iBAAiB,WAAS;AACtD,UAAM,YAAY,cAAc;AAChC,QAAI,CAAC,kBAAkB,SAAS,GAAG;AACjC,aAAO;AAAA,IACT;AACA,UAAM,eAAe;AACrB,UAAM,UAAU,eAAe,SAAS,IAAI,MAAM,WAAW,0BAA0B,yBAAyB;AAChH,WAAO,OAAO,gBAAgB,SAAS,MAAS;AAAA,EAClD,GAAG,uBAAuB;AAC5B;AAOA,SAAS,uBAAuB;AAC9B,QAAM,CAAC,MAAM,IAAI,0BAA0B;AAC3C,8BAAU,MAAM;AACd,WAAO,uBAAuB,MAAM;AAAA,EACtC,CAAC;AACD,SAAO;AACT;",
  "names": []
}
