{
  "version": 3,
  "sources": ["../../@lexical/react/useLexicalNodeSelection.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getSelection, $isNodeSelection, $createNodeSelection, $setSelection, $getNodeByKey } from 'lexical';\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      return false;\n    }\n    return node.isSelected();\n  });\n}\nfunction useLexicalNodeSelection(key) {\n  const [editor] = useLexicalComposerContext();\n  const [isSelected, setIsSelected] = useState(() => isNodeSelected(editor, key));\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = useCallback(selected => {\n    editor.update(() => {\n      let selection = $getSelection();\n      if (!$isNodeSelection(selection)) {\n        selection = $createNodeSelection();\n        $setSelection(selection);\n      }\n      if ($isNodeSelection(selection)) {\n        if (selected) {\n          selection.add(key);\n        } else {\n          selection.delete(key);\n        }\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = useCallback(() => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\n\nexport { useLexicalNodeSelection };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAUA,mBAAiD;AAUjD,SAAS,eAAe,QAAQ,KAAK;AACnC,SAAO,OAAO,eAAe,EAAE,KAAK,MAAM;AACxC,UAAM,OAAO,cAAc,GAAG;AAC9B,QAAI,SAAS,MAAM;AACjB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,WAAW;AAAA,EACzB,CAAC;AACH;AACA,SAAS,wBAAwB,KAAK;AACpC,QAAM,CAAC,MAAM,IAAI,0BAA0B;AAC3C,QAAM,CAAC,YAAY,aAAa,QAAI,uBAAS,MAAM,eAAe,QAAQ,GAAG,CAAC;AAC9E,8BAAU,MAAM;AACd,QAAI,YAAY;AAChB,UAAM,aAAa,OAAO,uBAAuB,MAAM;AACrD,UAAI,WAAW;AACb,sBAAc,eAAe,QAAQ,GAAG,CAAC;AAAA,MAC3C;AAAA,IACF,CAAC;AACD,WAAO,MAAM;AACX,kBAAY;AACZ,iBAAW;AAAA,IACb;AAAA,EACF,GAAG,CAAC,QAAQ,GAAG,CAAC;AAChB,QAAM,kBAAc,0BAAY,cAAY;AAC1C,WAAO,OAAO,MAAM;AAClB,UAAI,YAAY,cAAc;AAC9B,UAAI,CAAC,iBAAiB,SAAS,GAAG;AAChC,oBAAY,qBAAqB;AACjC,sBAAc,SAAS;AAAA,MACzB;AACA,UAAI,iBAAiB,SAAS,GAAG;AAC/B,YAAI,UAAU;AACZ,oBAAU,IAAI,GAAG;AAAA,QACnB,OAAO;AACL,oBAAU,OAAO,GAAG;AAAA,QACtB;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,QAAQ,GAAG,CAAC;AAChB,QAAM,oBAAgB,0BAAY,MAAM;AACtC,WAAO,OAAO,MAAM;AAClB,YAAM,YAAY,cAAc;AAChC,UAAI,iBAAiB,SAAS,GAAG;AAC/B,kBAAU,MAAM;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,MAAM,CAAC;AACX,SAAO,CAAC,YAAY,aAAa,aAAa;AAChD;",
  "names": []
}
